kind: ConfigMap
apiVersion: v1
metadata:
  name: orion-ld-create-sm-cm
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "1"
data:
  insert-data.py: |-
    # function to create the call base on server parameters
    # grab the list
    # prepare parameters
    # fill success results and fail results
    import requests
    import json


    def open_json(fileUrl):
        import json
        import requests
        if fileUrl[0:4] == "http":
            # es URL
            try:
                pointer = requests.get(fileUrl)
                return json.loads(pointer.content.decode('utf-8'))
            except:
                return None

        else:
            # es file
            try:
                file = open(fileUrl, "r")
                return json.loads(file.read())
            except:
                return None


    def list_broker_entities(serverUrl):
        headers = {
            'Content-Type': 'application/ld+json',
            'Accept': 'application/ld+json'
        }
        page = 1
        page_size = 10
        has_next_page = True

        all_entity_ids = []
        # print(serverUrl)

        while has_next_page:
            params = {
                "page": str(page),
                "limit": str(page_size)
            }
            # response = requests.get(serverUrl, headers=headers, params=params)
            # response = requests.get(serverUrl + "?local=true")
            response = requests.get(serverUrl, headers=headers, params=params)

            # print(response.text)

            if response.status_code == 200:
                entities = json.loads(response.text)
                # print(entities)
                # print(response.headers)

                # Retrieve the IDs of entities on the current page
                entity_ids = [entity["id"] for entity in entities]
                print(entity_ids)
                # Append entity IDs to the list
                all_entity_ids.extend(entity_ids)

                # If the number of retrieved entities is less than the page size, we have reached the end

                link_header = response.headers.get("Link")
                if link_header and 'rel="next"' in link_header:
                    page += 1
                else:
                    has_next_page = False
            else:
                print(f"Failed to retrieve entities. Status code: {response.status_code}")
                print(response)
                return None

        return all_entity_ids


    def fill_broker(serverUrl, examplePayload):
        headers = {
            'Content-Type': 'application/ld+json',
            'Accept': 'application/ld+json'
        }

        response = requests.post(serverUrl, data=examplePayload, headers=headers)
        # print(response)

        if response.status_code == 201:
            print('Entity inserted successfully')
            return response
        else:
            print('Failed to insert entity. Status code:', response.status_code)
            print('Response:', response.text)
            return response


    # server URL
    server = "http://orion-ld-sm:1026/ngsi-ld/v1/entities"
    dataModelsListUrl = "https://raw.githubusercontent.com/smart-data-models/data-models/master/specs/AllSubjects/official_list_data_models.json"
    # text = requests.get(dataModelsListUrl)
    # print(text.text)
    repos = open_json(dataModelsListUrl)["officialList"]
    # repos = json.loads(text.text)
    # print("the repos are:")
    # print(repos)
    success = []
    successfile = open("success.json", "w")
    failures = []
    failuresfile = open("failures.txt", "w")
    ids = []
    limit = 1000
    counter = 0
    for repo in repos:
        dataModels = repo["dataModels"]
        subject = repo["repoName"]
        print(subject)
        for dataModel in dataModels:
            counter += 1
            if counter > limit:
                json.dump(success, successfile)
                json.dump(failures, failuresfile)
                break
            print(dataModel)
            # https://raw.githubusercontent.com/smart-data-models/dataModel.User/master/Activity/examples/example-normalized.jsonld
            url = "https://raw.githubusercontent.com/smart-data-models/" + subject + "/master/" + dataModel + "/examples/example-normalized.jsonld"
            payload = open_json(url)
            # print(payload)
            try:
                ids.append(payload["id"])
                output = fill_broker(server, json.dumps(payload))
                print(output)
                if "20" in str(output.status_code):
                    success.append({"dataModel": dataModel, "subject": subject})
                elif "40" in str(output.status_code):
                    failures.append({"dataModel": dataModel, "subject": subject})
            except:
                failures.append({"dataModel": dataModel, "subject": subject})
                print("Not possible to ingest the example")
        else:
            continue
        break
    ids = list_broker_entities(server)
    print(ids)