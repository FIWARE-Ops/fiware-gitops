source: https://github.com/FIWARE-Ops/data-space-connector
release: dsba
destination_namespace: &destination dsba
purpose: &purpose dsc-env
branch: &branch deploy/dsba
secretsEnabled: &secretsEnabled true
host: &host
tlsSecret: &tlsSecret
participant: packet-delivery

applications:

  - name: packet-delivery-mysql
    enabled: true
    source_path: applications/mysql
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      mysql:
        fullnameOverride: mysql-pdc
        auth:
          existingSecret: mysql-secret
        rbac: 
          create: true
          rules:
            - apiGroups:
                - security.openshift.io
              resourceNames:
                - anyuid
              resources:
                - securitycontextconstraints
              verbs:
                - use

  - name: packet-delivery-mongodb
    enabled: true
    source_path: applications/mongodb
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      mongodb:
        auth:
          enabled: true
          existingSecret: mongodb-secret

  - name: packet-delivery-postgres
    enabled: true
    source_path: applications/postgres
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      postgresql:
        fullnameOverride: postgresql-pdc
        auth:
          username: keycloak  
          enablePostgresUser: true
          existingSecret: postgres-secret
          secretKeys:
            adminPasswordKey: postgres-root-password
            userPasswordKey: postgres-password
        rbac: 
          create: true
          rules:
            - apiGroups:
                - security.openshift.io
              resourceNames:
                - anyuid
              resources:
                - securitycontextconstraints
              verbs:
                - use
        primary:
          initdb:
            scripts:
              create.sh: |
                psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak_pdc;"

  - name: packet-delivery-orion
    enabled: true
    source_path: applications/orion-ld
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      orion:
        broker:
          db:
            auth: 
              user: root
              mech: "SCRAM-SHA-1"
            hosts:
              - packet-delivery-mongodb
            user: root
            existingSecret:
              name: mongodb-secret
              key: mongodb-root-password
        initData:
          initEnabled: true
          entities:
            - name: deliveryorder_happypets001.json
              data: |
                {
                  "id": "urn:ngsi-ld:DELIVERYORDER:HAPPYPETS001",
                  "type": "DELIVERYORDER",
                  "issuer": {
                    "type": "Property",
                    "value": "Happy Pets"
                  },
                  "destinee": {
                    "type": "Property",
                    "value": "Happy Pets customer"
                  },
                  "deliveryAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Berlin",
                      "addressLocality": "Berlin",
                      "postalCode": "12345",
                      "streetAddress": "Customer Strasse 23"
                    }
                  },
                  "originAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Berlin",
                      "addressLocality": "Berlin",
                      "postalCode": "12345",
                      "streetAddress": "HappyPets Strasse 15"
                    }
                  },
                  "pda": {
                    "type": "Property",
                    "value": "2021-10-03"
                  },
                  "pta": {
                    "type": "Property",
                    "value": "14:00:00"
                  },
                  "eda": {
                    "type": "Property",
                    "value": "2021-10-02"
                  },
                  "eta": {
                    "type": "Property",
                    "value": "14:00:00"
                  },
                  "@context": [
                    "https://schema.lab.fiware.org/ld/context"
                  ]
                }
                
            - name: deliveryorder_happypets002.json
              data: |
                {
                  "id": "urn:ngsi-ld:DELIVERYORDER:HAPPYPETS002",
                  "type": "DELIVERYORDER",
                  "issuer": {
                    "type": "Property",
                    "value": "Happy Pets"
                  },
                  "destinee": {
                    "type": "Property",
                    "value": "Happy Pets 2nd customer"
                  },
                  "deliveryAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Hamburg",
                      "addressLocality": "Hamburg",
                      "postalCode": "23456",
                      "streetAddress": "Customer Str. 18"
                    }
                  },
                  "originAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Berlin",
                      "addressLocality": "Berlin",
                      "postalCode": "12345",
                      "streetAddress": "HappyPets Strasse 15"
                    }
                  },
                  "pda": {
                    "type": "Property",
                    "value": "2021-11-12"
                  },
                  "pta": {
                    "type": "Property",
                    "value": "11:00:00"
                  },
                  "eda": {
                    "type": "Property",
                    "value": "2021-11-12"
                  },
                  "eta": {
                    "type": "Property",
                    "value": "11:00:00"
                  },
                  "@context": [
                    "https://schema.lab.fiware.org/ld/context"
                  ]
                }

            - name: deliveryorder_animalgoods001.json
              data: |
                {
                  "id": "urn:ngsi-ld:DELIVERYORDER:ANIMALGOODS001",
                  "type": "DELIVERYORDER",
                  "issuer": {
                    "type": "Property",
                    "value": "Animal Goods"
                  },
                  "destinee": {
                    "type": "Property",
                    "value": "Cheaty Customer"
                  },
                  "deliveryAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Bavaria",
                      "addressLocality": "Munich",
                      "postalCode": "60978",
                      "streetAddress": "Cheaty Str. 66"
                    }
                  },
                  "originAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Hamburg",
                      "addressLocality": "Hamburg",
                      "postalCode": "34567",
                      "streetAddress": "Cheapstr. 23"
                    }
                  },
                  "pda": {
                    "type": "Property",
                    "value": "2021-12-02"
                  },
                  "pta": {
                    "type": "Property",
                    "value": "14:00:00"
                  },
                  "eda": {
                    "type": "Property",
                    "value": "2021-12-02"
                  },
                  "eta": {
                    "type": "Property",
                    "value": "14:00:00"
                  },
                  "@context": [
                    "https://schema.lab.fiware.org/ld/context"
                  ]
                }

            - name: deliveryorder_animalgoods002.json
              data: |
                {
                  "id": "urn:ngsi-ld:DELIVERYORDER:ANIMALGOODS002",
                  "type": "DELIVERYORDER",
                  "issuer": {
                    "type": "Property",
                    "value": "Animal Goods"
                  },
                  "destinee": {
                    "type": "Property",
                    "value": "Bob Customer"
                  },
                  "deliveryAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Bavaria",
                      "addressLocality": "Munich",
                      "postalCode": "60979",
                      "streetAddress": "Bavarian Str. 2"
                    }
                  },
                  "originAddress": {
                    "type": "Property",
                    "value": {
                      "addressCountry": "DE",
                      "addressRegion": "Hamburg",
                      "addressLocality": "Hamburg",
                      "postalCode": "34567",
                      "streetAddress": "Cheapstr. 23"
                    }
                  },
                  "pda": {
                    "type": "Property",
                    "value": "2021-12-24"
                  },
                  "pta": {
                    "type": "Property",
                    "value": "14:00:00"
                  },
                  "eda": {
                    "type": "Property",
                    "value": "2021-12-24"
                  },
                  "eta": {
                    "type": "Property",
                    "value": "14:00:00"
                  },
                  "@context": [
                    "https://schema.lab.fiware.org/ld/context"
                  ]
                }

  - name: packet-delivery-til
    enabled: true
    source_path: applications/trusted-issuers-list
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      trusted-issuers-list:
        deployment:
          image:  
            tag: 0.0.3
        route: 
          til: 
            enabled: true 
            host: til-pdc.dsba.fiware.dev
            tls:
              insecureEdgeTerminationPolicy: Redirect
              termination: edge
            certificate:
              issuer:
                kind: ClusterIssuer
                name: letsencrypt-aws-prod
          tir: 
            enabled: true 
            host: tir-pdc.dsba.fiware.dev
            tls:
              insecureEdgeTerminationPolicy: Redirect
              termination: edge
            certificate:
              issuer:
                kind: ClusterIssuer
                name: letsencrypt-aws-prod
  
        database:
          persistence: true
          host: mysql-pdc
          username: root
          name: til
          existingSecret:
            enabled: true
            name: mysql-secret
            key: dbPassword

        initData:
          initEnabled: true
          issuers:
            - name: mp_create
              issuer:
                did: "did:web:marketplace.dsba.fiware.dev:did"
                credentials:
                  - validFor:
                      from: "2022-07-21T17:32:28Z"
                      to: "2040-07-21T17:32:28Z"
                    credentialsType: "ActivationService"
                    claims:
                      - name: "roles"
                        allowedValues: 
                          - - names:
                              - "CREATE_ISSUER"
                              target: "did:web:packetdelivery.dsba.fiware.dev:did"
                  - validFor:
                      from: "2022-07-21T17:32:28Z"
                      to: "2040-07-21T17:32:28Z"
                    credentialsType: "VerifiableCredential"

  - name: packet-delivery-walt-id
    enabled: true
    source_path: applications/walt-id
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      did: did:web:packetdelivery.dsba.fiware.dev:did
      route:
        enabled: true
        host: packetdelivery.dsba.fiware.dev
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge
        certificate:
          issuer:
            kind: ClusterIssuer
            name: letsencrypt-aws-prod
      vcwaltid:
        persistence:
          enabled: true
          pvc:
            size: 1Gi
        templates:
          GaiaXParticipantCredential.json: |
            {
              "@context": [
                "https://www.w3.org/2018/credentials/v1",
                "https://registry.lab.dsba.eu/development/api/trusted-shape-registry/v1/shapes/jsonld/trustframework#"
              ],
              "type": [
                "VerifiableCredential"
              ],
              "id": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
              "issuer": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
              "issuanceDate": "2023-03-21T12:00:00.148Z",
              "credentialSubject": {
                "id": "did:web:raw.githubusercontent.com:egavard:payload-sign:master",
                "type": "gx:LegalParticipant",
                "gx:legalName": "dsba compliant participant",
                "gx:legalRegistrationNumber": {
                  "gx:vatID": "MYVATID"
                },
                "gx:headquarterAddress": {
                  "gx:countrySubdivisionCode": "BE-BRU"
                },
                "gx:legalAddress": {
                  "gx:countrySubdivisionCode": "BE-BRU"
                },
                "gx-terms-and-conditions:gaiaxTermsAndConditions": "70c1d713215f95191a11d38fe2341faed27d19e083917bc8732ca4fea4976700"
              }
            }
          NaturalPersonCredential.json: |
            {
              "@context": ["https://www.w3.org/2018/credentials/v1"],
              "credentialSchema": {
                "id": "https://raw.githubusercontent.com/FIWARE-Ops/tech-x-challenge/main/schema.json",
                "type": "FullJsonSchemaValidator2021"
              },
              "credentialSubject": {
                "type": "gx:NaturalParticipant",
                "familyName": "Happy",
                "firstName": "User",
                "roles": [{
                  "names": ["LEGAL_REPRESENTATIVE"],
                  "target": "did:web:onboarding"
                 }]
              },
              "id": "urn:uuid:3add94f4-28ec-42a1-8704-4e4aa51006b4",
              "issued": "2021-08-31T00:00:00Z",
              "issuer": "did:ebsi:2A9BZ9SUe6BatacSpvs1V5CdjHvLpQ7bEsi2Jb6LdHKnQxaN",
              "validFrom": "2021-08-31T00:00:00Z",
              "issuanceDate": "2021-08-31T00:00:00Z",
              "type": ["VerifiableCredential", "LegalPersonCredential"]
            }
          MarketplaceUserCredential.json: |
            {
              "@context": ["https://www.w3.org/2018/credentials/v1"],
              "credentialSchema": {
                "id": "https://raw.githubusercontent.com/FIWARE-Ops/tech-x-challenge/main/schema.json",
                "type": "FullJsonSchemaValidator2021"
              },
              "credentialSubject": {
                "type": "gx:NaturalParticipant",
                "email": "normal-user@fiware.org",
                "familyName": "PDC",
                "firstName": "employee",
                "lastName": "PDC",
                "roles": [{
                  "names": ["LEGAL_REPRESENTATIVE"],
                  "target": "did:web:onboarding"
                }]
              },
              "id": "urn:uuid:3add94f4-28ec-42a1-8704-4e4aa51006b4",
              "issued": "2021-08-31T00:00:00Z",
              "issuer": "did:ebsi:2A9BZ9SUe6BatacSpvs1V5CdjHvLpQ7bEsi2Jb6LdHKnQxaN",
              "validFrom": "2021-08-31T00:00:00Z",
              "issuanceDate": "2021-08-31T00:00:00Z",
              "type": ["MarketplaceUserCredential"]
            }
          EmployeeCredential.json: |
            {
              "@context": ["https://www.w3.org/2018/credentials/v1"],
              "credentialSchema": {
                "id": "https://raw.githubusercontent.com/FIWARE-Ops/tech-x-challenge/main/schema.json",
                "type": "FullJsonSchemaValidator2021"
              },
              "credentialSubject": {
                "type": "gx:NaturalParticipant",
                "email": "normal-user@fiware.org",
                "familyName": "PDC",
                "firstName": "employee",
                "lastName": "PDC",
                "roles": [{
                  "names": ["LEGAL_REPRESENTATIVE"],
                  "target": "did:web:onboarding"
                }]
              },
              "id": "urn:uuid:3add94f4-28ec-42a1-8704-4e4aa51006b4",
              "issued": "2021-08-31T00:00:00Z",
              "issuer": "did:ebsi:2A9BZ9SUe6BatacSpvs1V5CdjHvLpQ7bEsi2Jb6LdHKnQxaN",
              "validFrom": "2021-08-31T00:00:00Z",
              "issuanceDate": "2021-08-31T00:00:00Z",
              "type": ["EmployeeCredential"]
            }

  - name: packet-delivery-ccs
    enabled: true
    source_path: applications/credentials-config-service
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      credentials-config-service:
        database:
          persistence: true
          host: mysql-pdc
          name: ccs
          existingSecret:
            enabled: true
            name: mysql-secret
            key: dbPassword

  - name: packet-delivery-verifier
    enabled: true
    source_path: applications/verifier
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      vcverifier:
        deployment:
          logging:
            level: DEBUG
            pathsToSkip:
              - "/health"
          ssikit:
            auditorUrl: http://packet-delivery-walt-id-vcwaltid:7003
          verifier:
            tirAddress: https://tir.dsba.fiware.dev/v3/issuers
          did: did:web:packetdelivery.dsba.fiware.dev:did
          configRepo:
            configEndpoint: http://packet-delivery-ccs-credentials-config-service:8080/
        route:
          enabled: true
          host: verifier-pdc.dsba.fiware.dev
          tls:
            insecureEdgeTerminationPolicy: Redirect
            termination: edge
          certificate:
            issuer:
              kind: ClusterIssuer
              name: letsencrypt-aws-prod

  - name: packet-delivery-pdp
    enabled: true
    source_path: applications/pdp
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      dsba-pdp:
        deployment:
          logLevel: TRACE
          ishare:
            existingSecret: dsba-packet-delivery-walt-id-vcwaltid-tls-sec

            clientId: did:web:packetdelivery.dsba.fiware.dev:did
            trustedFingerprints:
              - D2F62092F982CF783D4632BD86FA86C3FBFDB2D8C8A58BC6809163FCF5CD030B

            ar:
              id: "did:web:packetdelivery.dsba.fiware.dev:did"
              delegationPath: "/ar/delegation"
              tokenPath: "/oauth2/token"
              url: "https://ar-pdc.dsba.fiware.dev"

            trustAnchor:
              id: "EU.EORI.FIWARESATELLITE"
              tokenPath: "/token"
              trustedListPath: "/trusted_list"
              url: "https://tir.dsba.fiware.dev"

          trustedVerifiers:
            - https://verifier-pdc.dsba.fiware.dev/.well-known/jwks

          providerId: "did:web:packetdelivery.dsba.fiware.dev:did"

        additionalEnvVars:
          - name: ISHARE_CERTIFICATE_PATH
            value: /iShare/tls.crt
          - name: ISHARE_KEY_PATH
            value: /iShare/tls.key

  - name: packet-delivery-activation-service
    enabled: true
    source_path: applications/activation-service
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      activation-service:
        route:
          enabled: true
          host: as-packetdelivery.dsba.fiware.dev
          tls:
            termination: edge
            insecureEdgeTerminationPolicy: Redirect
          certificate:
            issuer:
              kind: ClusterIssuer
              name: letsencrypt-aws-prod
        existingSecretEnvs: pdc-as-envs-secret
        activationService:
          port: 8080
          workers: 1
          maxHeaderSize: 32768
          logLevel: "debug"
        ccs:
          endpoint: "http://packet-delivery-ccs-credentials-config-service:8080/"
          id: "pdc-activation-service"
          credentials:
            - type: "VerifiableCredential"
              trustedParticipantsLists: [
                "https://tir.dsba.fiware.dev"
              ]
              trustedIssuersLists: [
                "http://packet-delivery-til-trusted-issuers-list:8080"
              ]
            - type: "ActivationService"
              trustedParticipantsLists: [
                "https://tir.dsba.fiware.dev"
              ]
              trustedIssuersLists: [
                "http://packet-delivery-til-trusted-issuers-list:8080"
              ]
        config:
          db:
            useMemory: true
            modTracking: false
            echo: true
          apikeys:
            ishare:
              enabledToken: false
              enabledCreatePolicy: false
            issuer:
              headerName: "AS-API-KEY"
              apiKey: ""
              enabledIssuer: true
          ar:
            token: "https://ar.isharetest.net/connect/token"
            policy: "https://ar.isharetest.net/policy"
            delegation: "https://ar.isharetest.net/delegation"
            id: "EU.EORI.DEPROVIDER"
          issuer:
            clientId: "pdc-activation-service"
            providerId: "did:web:packetdelivery.dsba.fiware.dev:did"
            tilUri: "http://packet-delivery-til-trusted-issuers-list:8080"
            verifierUri: "https://verifier-pdc.dsba.fiware.dev"
            samedevicePath: "/api/v1/samedevice"
            jwksPath: "/.well-known/jwks"
            algorithms:
              - "ES256"
            roles:
              createRole: "CREATE_ISSUER"
              updateRole: "UPDATE_ISSUER"
              deleteRole: "DELETE_ISSUER"

  - name: packet-delivery-kong
    enabled: true
    source_path: applications/kong
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      kong:
        replicaCount: 1
        autoscaling:
          enabled: false
        ingressController:
          enabled: false
          installCRDs: false
        proxy:
          type: ClusterIP
          enabled: true
          tls:
            enabled: false
          ingress:
            enabled: false
          route:
            enabled: true
            host: kong-pdc.dsba.fiware.dev
            certificate:
              issuer:
                kind: ClusterIssuer
                name: letsencrypt-aws-prod
            tls:
              termination: edge
              insecureEdgeTerminationPolicy: Redirect
        podAnnotations:
          prometheus.io/scrape: 'true'
          prometheus.io/port: '9102'
        dblessConfig:
          config: |
            _format_version: "2.1"
            _transform: true
            consumers:
            - username: token-consumer
              keyauth_credentials:
              - tags:
                - token-key
                - tir-key
            services:
              - host: "packet-delivery-orion"
                name: "pdc"
                port: 1026
                protocol: http
                routes:
                  - name: pdc
                    paths:
                      - /pdc
                    strip_path: true
                plugins:
                  - name: pep-plugin
                    config:
                      pathprefix: "/pdc"
                      authorizationendpointtype: ExtAuthz
                      authorizationendpointaddress: http://packet-delivery-pdp-dsba-pdp:8080/authz
                  - name: request-transformer
                    config:
                      remove:
                        headers:
                          - Authorization
                          - authorization

  - name: packet-delivery-keyrock
    enabled: true
    source_path: applications/keyrock
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      keyrock:
        fullnameOverride: keyrock-pdc
        db:
          user: root
          host: mysql-pdc
        admin:
          user: admin
          email: admin@fiware.org
        existingSecret: keyrock-secret
        host: https://ar-pdc.dsba.fiware.dev
        route:
          enabled: true
          routes:
            - host: ar-pdc.dsba.fiware.dev
              tls:
                termination: edge
                insecureEdgeTerminationPolicy: Redirect
              certificate:
                issuer: 
                  kind: ClusterIssuer
                  name: letsencrypt-aws-prod
        authorisationRegistry:
          enabled: true
          identifier: "did:web:packetdelivery.dsba.fiware.dev:did"
          url: "internal"
        satellite:
          enabled: true
          identifier: "EU.EORI.FIWARESATELLITE"
          url: "https://tir.dsba.fiware.dev"
          tokenEndpoint: "https://tir.dsba.fiware.dev/token"
          partiesEndpoint: "https://tir.dsba.fiware.dev/parties"
        token:
          enabled: false
        additionalEnvVars:
          - name: IDM_TITLE
            value: "PDC AR"
          - name: IDM_DEBUG
            value: "true"
          - name: DEBUG
            value: "*"
          - name: IDM_DB_NAME
            value: pdc_ar_idm
          - name: IDM_DB_SEED
            value: "true"
          - name: IDM_SERVER_MAX_HEADER_SIZE
            value: "32768"
          - name: IDM_PR_CLIENT_ID
            value: "did:web:packetdelivery.dsba.fiware.dev:did"
          - name: IDM_PR_CLIENT_KEY
            valueFrom:
                secretKeyRef:
                  name: dsba-packet-delivery-walt-id-vcwaltid-tls-sec
                  key: tls.key
          - name: IDM_PR_CLIENT_CRT
            valueFrom:
                secretKeyRef:
                  name: dsba-packet-delivery-walt-id-vcwaltid-tls-sec
                  key: tls.crt
        initData:
          initEnabled: true
          image: quay.io/wi_stefan/mysql:5.7
          command: 
            - /bin/sh
            - /scripts/create.sh
          volumeMount:
            name: scripts
            mountPath: /scripts
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keyrock-secret
                  key: dbPassword
          scriptData:
            create.sh: |-
              mysql -h mysql-pdc -u root -p$DB_PASSWORD pdc_ar_idm <<EOF
              
              -- Static objects
              SET @rules := JSON_ARRAY(
                JSON_OBJECT(
                  "effect", "Permit"
                )
              );
              
              SET @subjectGold := "GOLD_CUSTOMER";
              SET @subjectStandard := "STANDARD_CUSTOMER";
              
              -- Policies Gold
              SET @policiesGold := JSON_ARRAY(
                JSON_OBJECT(
                  "rules", CAST(@rules as JSON),
                  "target", JSON_OBJECT(
                    "actions", JSON_ARRAY("PATCH"),
                    "resource", JSON_OBJECT(
                      "type", "DELIVERYORDER",
                      "attributes", JSON_ARRAY("pta","pda"),
                      "identifiers", JSON_ARRAY("*")
                    )
                  )
                ),
                JSON_OBJECT(
                  "rules", CAST(@rules as JSON),
                  "target", JSON_OBJECT(
                    "actions", JSON_ARRAY("GET"),
                    "resource", JSON_OBJECT(
                      "type", "DELIVERYORDER",
                      "attributes", JSON_ARRAY("*"),
                      "identifiers", JSON_ARRAY("*")
                    )
                  )
                )
              );
              
              -- Policies Standard
              SET @policiesStandard := JSON_ARRAY(
                JSON_OBJECT(
                  "rules", CAST(@rules as JSON),
                  "target", JSON_OBJECT(
                    "actions", JSON_ARRAY("GET"),
                    "resource", JSON_OBJECT(
                      "type", "DELIVERYORDER",
                      "attributes", JSON_ARRAY("*"),
                      "identifiers", JSON_ARRAY("*")
                    )
                  )
                )
              );
              
              -- Insert Delegation Evidence Gold VC
              SET @delegationGoldVC := JSON_OBJECT(
                "target", JSON_OBJECT(
                  "accessSubject", @subjectGold
                ),
                "notBefore", 1616583866,
                "notOnOrAfter", 1735817171,
                "policyIssuer", "did:web:packetdelivery.dsba.fiware.dev:did",
                "policySets", JSON_ARRAY(
                  JSON_OBJECT(
                    "target", JSON_OBJECT(
                      "environment", JSON_OBJECT(
                        "licenses", JSON_ARRAY("ISHARE.0001")
                      )
                    ),
                    "policies", CAST(@policiesGold as JSON)
                  )
                )
              );
              INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:web:packetdelivery.dsba.fiware.dev:did", @subjectGold, @delegationGoldVC);
              
              -- Insert Delegation Evidence Standard VC
              SET @delegationStandardVC := JSON_OBJECT(
                "target", JSON_OBJECT(
                  "accessSubject", @subjectStandard
                ),
                "notBefore", 1616583866,
                "notOnOrAfter", 1735817171,
                "policyIssuer", "did:web:packetdelivery.dsba.fiware.dev:did",
                "policySets", JSON_ARRAY(
                  JSON_OBJECT(
                    "target", JSON_OBJECT(
                      "environment", JSON_OBJECT(
                        "licenses", JSON_ARRAY("ISHARE.0001")
                      )
                    ),
                    "policies", CAST(@policiesStandard as JSON)
                  )
                )
              );
              INSERT IGNORE INTO delegation_evidence (policy_issuer, access_subject,policy) VALUES ("did:web:packetdelivery.dsba.fiware.dev:did", @subjectStandard, @delegationStandardVC);
              
              COMMIT;
              EOF

  - name: packet-delivery-keycloak
    enabled: true
    source_path: applications/keycloak
    source_ref: *branch
    destination: *destination
    helm_values:
    - values.yaml
    values:
      route:
        enabled: true
        host: packetdelivery-kc.dsba.fiware.dev
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge
        certificate:
          issuer:
            kind: ClusterIssuer
            name: letsencrypt-aws-prod
      keycloak:
        service:
          type: ClusterIP
        logging:
          level: INFO
        replicaCount: 1
        auth:
          adminUser: fiwareAdmin
          adminPassword: fiwareAdmin
        serviceAccount:
          create: true
        rbac:
          create: true
          rules:
            - apiGroups:
                - security.openshift.io
              resourceNames:
                - anyuid
              resources:
                - securitycontextconstraints
              verbs:
                - use
        extraEnvVars:
          - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
            value: "true"
          - name: KEYCLOAK_LOG_LEVEL
            value: INFO
          - name: VCISSUER_ISSUER_DID
            value: "did:web:packetdelivery.dsba.fiware.dev:did"
          - name: VCISSUER_WALTID_ADDRESS
            value: "http://packet-delivery-walt-id-vcwaltid"
        extraVolumes:
          - name: data
            emptyDir: {}
          - name: profiles
            configMap:
              name: packet-delivery-keycloak-profile
          - name: providers
            emptyDir: {}
          - name: did-config
            configMap:
              name: packet-delivery-keycloak-did-config
          - name: did-secret
            secret: 
              secretName: dsba-packet-delivery-walt-id-vcwaltid-tls-sec
        initContainers:
          - name: add-vc-issuer
            image: quay.io/fiware/keycloak-vc-issuer:0.5.0
            imagePullPolicy: Always
            volumeMounts:
              - name: providers
                mountPath: /target
          - name: load-did
            image: quay.io/opencloudio/curl:4.2.0-build.8
            imagePullPolicy: Always
            command: 
              - /bin/sh
              - /opt/did/script/import.sh
            env:
              - name: WALTID_CORE_ADDRESS
                value: "packet-delivery-walt-id-vcwaltid:7000"
            volumeMounts:
              - name: did-config
                mountPath: /opt/did/script
              - name: did-secret
                mountPath: /opt/did/secret
        postgresql:
          enabled: false
        externalDatabase:
          host: postgresql-pdc
          user: postgres
          database: keycloak_pdc
          existingSecret: postgres-secret
          existingSecretPasswordKey: postgres-password
        keycloakConfigCli:
          enabled: true
          containerSecurityContext:
            enabled: false
          podSecurityContext:
            enabled: false
          configuration:
            realm.json: |-
              {
                "id": "fiware-server",
                "realm": "fiware-server",
                "accountTheme": "siop-2",
                "displayName": "Keycloak",
                "displayNameHtml": "<div class=\"kc-logo-text\"><span>Keycloak</span></div>",
                "enabled": true,
                "attributes": {
                  "frontendUrl": "https://packetdelivery-kc.dsba.fiware.dev"
                },
                "sslRequired": "none",
                "roles": {
                  "realm": [
                    {
                      "name": "user",
                      "description": "User privileges",
                      "composite": false,
                      "clientRole": false,
                      "containerId": "fiware-server",
                      "attributes": {}
                    }
                  ],
                  "client": {
                    "did:web:onboarding.dsba.fiware.dev:did": [
                      {
                        "name": "LEGAL_REPRESENTATIVE",
                        "description": "Is allowed to register participants",
                        "clientRole": true
                      },
                      {
                        "name": "EMPLOYEE",
                        "description": "Is allowed to see participants",
                        "clientRole": true
                      }
                    ],
                    "did:web:marketplace.dsba.fiware.dev:did": [
                      {
                        "name": "customer",
                        "description": "Is allowed to buy.",
                        "clientRole": true
                      },
                      {
                        "name": "seller",
                        "description": "Is allowed to offer.",
                        "clientRole": true
                      }
                    ],
                    "did:web:packetdelivery.dsba.fiware.dev:did": [
                      {
                        "name": "STANDARD_CUSTOMER",
                        "description": "User to access packetdelivery with read access",
                        "clientRole": true
                      },
                      {
                        "name": "GOLD_CUSTOMER",
                        "description": "User to access packetdelivery with read/write access",
                        "clientRole": true
                      }
                    ]
                  }
                },
                "groups": [
                  {
                    "name": "admin",
                    "path": "/admin",
                    "realmRoles": [
                      "user"
                    ]
                  },
                  {
                    "name": "consumer",
                    "path": "/consumer",
                    "realmRoles": [
                      "user"
                    ]
                  }
                ],
                "users": [
                  {
                    "username": "the-lear",
                    "enabled": true,
                    "email": "lear@pdc.org",
                    "credentials": [
                      {
                        "type": "password",
                        "value": "the-lear"
                      }
                    ],
                    "clientRoles": {
                      "did:web:onboarding.dsba.fiware.dev:did": [
                        "LEGAL_REPRESENTATIVE",
                        "EMPLOYEE"
                      ],
                      "account": [
                        "view-profile",
                        "manage-account"
                      ]
                    },
                    "groups": [
                      "/admin",
                      "/consumer"
                    ]
                  },
                  {
                    "username": "legal-representative",
                    "enabled": true,
                    "email": "legal-representative@pdc.org",
                    "firstName": "Legal",
                    "lastName": "PDCEmployee",
                    "credentials": [
                      {
                        "type": "password",
                        "value": "legal-representative"
                      }
                    ],
                    "clientRoles": {
                      "did:web:marketplace.dsba.fiware.dev:did" : [
                        "customer",
                        "seller"
                      ],
                      "did:web:onboarding.dsba.fiware.dev:did": [
                        "LEGAL_REPRESENTATIVE"
                      ],
                      "account": [
                        "view-profile",
                        "manage-account"
                      ]
                    },
                    "groups": [
                      "/admin",
                      "/consumer"
                    ]
                  },
                  {
                    "username": "standard-employee",
                    "enabled": true,
                    "email": "standard-employee@pdc.org",
                    "credentials": [
                      {
                        "type": "password",
                        "value": "standard-employee"
                      }
                    ],
                    "clientRoles": {
                      "did:web:onboarding.dsba.fiware.dev:did": [
                        "EMPLOYEE"
                      ],
                      "did:web:packetdelivery.dsba.fiware.dev:did": [
                        "GOLD_CUSTOMER"
                      ],
                      "account": [
                        "view-profile",
                        "manage-account"
                      ]
                    },
                    "groups": [
                      "/consumer"
                    ]
                  }
                ],
                "clients": [
                  {
                    "clientId": "did:web:packetdelivery.dsba.fiware.dev:did",
                    "enabled": true,
                    "description": "Client for internal users",
                    "surrogateAuthRequired": false,
                    "alwaysDisplayInConsole": false,
                    "clientAuthenticatorType": "client-secret",
                    "defaultRoles": [],
                    "redirectUris": [],
                    "webOrigins": [],
                    "notBefore": 0,
                    "bearerOnly": false,
                    "consentRequired": false,
                    "standardFlowEnabled": true,
                    "implicitFlowEnabled": false,
                    "directAccessGrantsEnabled": false,
                    "serviceAccountsEnabled": false,
                    "publicClient": false,
                    "frontchannelLogout": false,
                    "protocol": "SIOP-2",
                    "attributes": {
                        "client.secret.creation.time": "1675260539",
                        "expiryInMin": "3600",
                        "vctypes_EmployeeCredential": "ldp_vc,jwt_vc_json",
                        "EmployeeCredential_claims": "email,firstName,familyName,roles"
                    },
                    "authenticationFlowBindingOverrides": {},
                    "fullScopeAllowed": true,
                    "nodeReRegistrationTimeout": -1,
                    "defaultClientScopes": [],
                    "optionalClientScopes": []
                  },
                  {
                    "clientId": "did:web:marketplace.dsba.fiware.dev:did",
                    "enabled": true,
                    "description": "Client to connect to the marketplace",
                    "surrogateAuthRequired": false,
                    "alwaysDisplayInConsole": false,
                    "clientAuthenticatorType": "client-secret",
                    "defaultRoles": [],
                    "redirectUris": [],
                    "webOrigins": [],
                    "notBefore": 0,
                    "bearerOnly": false,
                    "consentRequired": false,
                    "standardFlowEnabled": true,
                    "implicitFlowEnabled": false,
                    "directAccessGrantsEnabled": false,
                    "serviceAccountsEnabled": false,
                    "publicClient": false,
                    "frontchannelLogout": false,
                    "protocol": "SIOP-2",
                    "attributes": {
                        "client.secret.creation.time": "1675260539",
                        "expiryInMin": "3600",
                        "vctypes_MarketplaceUserCredential": "ldp_vc,jwt_vc_json",
                        "MarketplaceUserCredential_claims": "email,firstName,lastName,roles"
                    },
                    "authenticationFlowBindingOverrides": {},
                    "fullScopeAllowed": true,
                    "nodeReRegistrationTimeout": -1,
                    "defaultClientScopes": [],
                    "optionalClientScopes": []
                  },
                  {
                    "clientId": "did:web:onboarding.dsba.fiware.dev:did",
                    "enabled": true,
                    "description": "Client to connect the onboarding service at portal.dsba.fiware.dev",
                    "surrogateAuthRequired": false,
                    "alwaysDisplayInConsole": false,
                    "clientAuthenticatorType": "client-secret",
                    "defaultRoles": [],
                    "redirectUris": [],
                    "webOrigins": [],
                    "notBefore": 0,
                    "bearerOnly": false,
                    "consentRequired": false,
                    "standardFlowEnabled": true,
                    "implicitFlowEnabled": false,
                    "directAccessGrantsEnabled": false,
                    "serviceAccountsEnabled": false,
                    "publicClient": false,
                    "frontchannelLogout": false,
                    "protocol": "SIOP-2",
                    "attributes": {
                        "client.secret.creation.time": "1675260539",
                        "expiryInMin": "3600",
                        "vctypes_NaturalPersonCredential": "ldp_vc,jwt_vc_json",
                        "vctypes_GaiaXParticipantCredential": "ldp_vc,jwt_vc_json",
                        "vc_subjectDid": "did:web:packetdelivery.dsba.fiware.dev:did",
                        "vc_gx:legalName": "Packet Delivery Company Inc.",
                        "GaiaXParticipantCredential_claims": "subjectDid,gx:legalName",
                        "NaturalPersonCredential_claims": "email,firstName,familyName,roles"
                    },
                    "authenticationFlowBindingOverrides": {},
                    "fullScopeAllowed": true,
                    "nodeReRegistrationTimeout": -1,
                    "defaultClientScopes": [],
                    "optionalClientScopes": []
                  },
                  {
                    "clientId": "did:web:marketplace.dsba.fiware.dev:did",
                    "enabled": true,
                    "description": "Client to connect to the marketplace",
                    "surrogateAuthRequired": false,
                    "alwaysDisplayInConsole": false,
                    "clientAuthenticatorType": "client-secret",
                    "defaultRoles": [],
                    "redirectUris": [],
                    "webOrigins": [],
                    "notBefore": 0,
                    "bearerOnly": false,
                    "consentRequired": false,
                    "standardFlowEnabled": true,
                    "implicitFlowEnabled": false,
                    "directAccessGrantsEnabled": false,
                    "serviceAccountsEnabled": false,
                    "publicClient": false,
                    "frontchannelLogout": false,
                    "protocol": "SIOP-2",
                    "attributes": {
                        "client.secret.creation.time": "1675260539",
                        "expiryInMin": "3600",
                        "vctypes_MarketplaceUserCredential": "ldp_vc,jwt_vc_json",
                        "MarketplaceUserCredential_claims": "email,firstName,lastName,roles"
                    },
                    "authenticationFlowBindingOverrides": {},
                    "fullScopeAllowed": true,
                    "nodeReRegistrationTimeout": -1,
                    "defaultClientScopes": [],
                    "optionalClientScopes": []
                  }
                ],
                "clientScopes": [
                  {
                    "name": "fiware-scope",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "true",
                      "display.on.consent.screen": "false"
                    },
                    "protocolMappers": [
                      {
                        "name": "fiware-scope-object",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-script-based-protocol-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "multivalued": "true",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "fiware-scope-object",
                          "script": "/**\n * Available variables: \n * user - the current user\n * realm - the current realm\n * token - the current token\n * userSession - the current userSession\n * keycloakSession - the current userSession\n */\n\nvar ArrayList = Java.type(\"java.util.ArrayList\");\nvar fiware_scope = new ArrayList();\n\nvar forEach = Array.prototype.forEach;\n\nvar fiware_service;\nvar fiware_servicepath;\nvar fiware_entry;\nvar roles = '';\n\nvar orion_client = realm.getClientByClientId('orion-pep');\n\nfiware_service = user.getFirstAttribute('fiware-service');\nfiware_servicepath = user.getFirstAttribute('fiware-servicepath');\nif (fiware_service !== null && fiware_servicepath !== null) {\n\n    fiware_entry = {\n        \"fiware-service\": fiware_service,\n        \"fiware-servicepath\": fiware_servicepath\n    };\n\n    var roleModels = user.getClientRoleMappings(orion_client);\n    if (roleModels.size() > 0) {\n        forEach.call(\n            user.getClientRoleMappings(orion_client).toArray(),\n            function (role) {\n                roles = roles + role.getName() + \",\";\n            }\n        );\n        roles = roles.substring(0, roles.length - 1);\n        fiware_entry[\"orion-roles\"] = roles;\n        roles = '';\n    }\n\n    fiware_scope.add(JSON.stringify(fiware_entry));\n    fiware_entry = {};\n}\n\nforEach.call(\n    user.getGroups().toArray(),\n    function (group) {\n\n        fiware_service = group.getFirstAttribute('fiware-service');\n        fiware_servicepath = group.getFirstAttribute('fiware-servicepath');\n        if (fiware_service !== null && fiware_servicepath !== null) {\n            fiware_entry = {\n                \"fiware-service\": fiware_service,\n                \"fiware-servicepath\": fiware_servicepath\n            };\n\n            var roleModels = group.getClientRoleMappings(orion_client);\n            if (roleModels.size() > 0) {\n                forEach.call(\n                    group.getClientRoleMappings(orion_client).toArray(),\n                    function (role) {\n                        roles = roles + role.getName() + \",\";\n                    }\n                );\n                roles = roles.substring(0, roles.length - 1);\n                fiware_entry[\"orion-roles\"] = roles;\n                roles = '';\n            }\n\n            fiware_scope.add(JSON.stringify(fiware_entry));\n            fiware_entry = {};\n        } else if (group.getParentId() !== null) {\n            fiware_service = group.getParent().getFirstAttribute('fiware-service');\n            fiware_servicepath = group.getParent().getFirstAttribute('fiware-servicepath');\n\n            if (fiware_service !== null && fiware_servicepath !== null) {\n                fiware_entry = {\n                    \"fiware-service\": fiware_service,\n                    \"fiware-servicepath\": fiware_servicepath\n                };\n                var subroleModels = group.getClientRoleMappings(orion_client);\n                if (subroleModels.size() > 0) {\n                    forEach.call(\n                        group.getClientRoleMappings(orion_client).toArray(),\n                        function (role) {\n                            roles = roles + role.getName() + \",\";\n                        }\n                    );\n                    roles = roles.substring(0, roles.length - 1);\n                    fiware_entry[\"orion-roles\"] = roles;\n                    roles = '';\n                }\n\n                fiware_scope.add(JSON.stringify(fiware_entry));\n                fiware_entry = '';\n            }\n        }\n    }\n);\n\nexports = fiware_scope;"
                        }
                      }
                    ]
                  },
                  {
                    "name": "offline_access",
                    "description": "OpenID Connect built-in scope: offline_access",
                    "protocol": "openid-connect",
                    "attributes": {
                      "consent.screen.text": "${offlineAccessScopeConsentText}",
                      "display.on.consent.screen": "true"
                    }
                  },
                  {
                    "name": "microprofile-jwt",
                    "description": "Microprofile - JWT built-in scope",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "true",
                      "display.on.consent.screen": "false"
                    },
                    "protocolMappers": [
                      {
                        "name": "upn",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "username",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "upn",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "groups",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-realm-role-mapper",
                        "consentRequired": false,
                        "config": {
                          "multivalued": "true",
                          "user.attribute": "foo",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "groups",
                          "jsonType.label": "String"
                        }
                      }
                    ]
                  },
                  {
                    "name": "roles",
                    "description": "OpenID Connect scope for add user roles to the access token",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "false",
                      "display.on.consent.screen": "true",
                      "consent.screen.text": "${rolesScopeConsentText}"
                    },
                    "protocolMappers": [
                      {
                        "name": "audience resolve",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-audience-resolve-mapper",
                        "consentRequired": false,
                        "config": {}
                      },
                      {
                        "name": "client roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": false,
                        "config": {
                          "user.attribute": "foo",
                          "access.token.claim": "true",
                          "claim.name": "resource_access.${client_id}.roles",
                          "jsonType.label": "String",
                          "multivalued": "true"
                        }
                      },
                      {
                        "name": "realm roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-realm-role-mapper",
                        "consentRequired": false,
                        "config": {
                          "user.attribute": "foo",
                          "access.token.claim": "true",
                          "claim.name": "realm_access.roles",
                          "jsonType.label": "String",
                          "multivalued": "true"
                        }
                      }
                    ]
                  },
                  {
                    "name": "email",
                    "description": "OpenID Connect built-in scope: email",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "true",
                      "display.on.consent.screen": "true",
                      "consent.screen.text": "${emailScopeConsentText}"
                    },
                    "protocolMappers": [
                      {
                        "name": "email",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "email",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "email",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "email verified",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "emailVerified",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "email_verified",
                          "jsonType.label": "boolean"
                        }
                      }
                    ]
                  },
                  {
                    "name": "phone",
                    "description": "OpenID Connect built-in scope: phone",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "true",
                      "display.on.consent.screen": "true",
                      "consent.screen.text": "${phoneScopeConsentText}"
                    },
                    "protocolMappers": [
                      {
                        "name": "phone number verified",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "phoneNumberVerified",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "phone_number_verified",
                          "jsonType.label": "boolean"
                        }
                      },
                      {
                        "name": "phone number",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "phoneNumber",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "phone_number",
                          "jsonType.label": "String"
                        }
                      }
                    ]
                  },
                  {
                    "name": "address",
                    "description": "OpenID Connect built-in scope: address",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "true",
                      "display.on.consent.screen": "true",
                      "consent.screen.text": "${addressScopeConsentText}"
                    },
                    "protocolMappers": [
                      {
                        "name": "address",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-address-mapper",
                        "consentRequired": false,
                        "config": {
                          "user.attribute.formatted": "formatted",
                          "user.attribute.country": "country",
                          "user.attribute.postal_code": "postal_code",
                          "userinfo.token.claim": "true",
                          "user.attribute.street": "street",
                          "id.token.claim": "true",
                          "user.attribute.region": "region",
                          "access.token.claim": "true",
                          "user.attribute.locality": "locality"
                        }
                      }
                    ]
                  },
                  {
                    "name": "role_list",
                    "description": "SAML role list",
                    "protocol": "saml",
                    "attributes": {
                      "consent.screen.text": "${samlRoleListScopeConsentText}",
                      "display.on.consent.screen": "true"
                    },
                    "protocolMappers": [
                      {
                        "name": "role list",
                        "protocol": "saml",
                        "protocolMapper": "saml-role-list-mapper",
                        "consentRequired": false,
                        "config": {
                          "single": "false",
                          "attribute.nameformat": "Basic",
                          "attribute.name": "Role"
                        }
                      }
                    ]
                  },
                  {
                    "name": "profile",
                    "description": "OpenID Connect built-in scope: profile",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "true",
                      "display.on.consent.screen": "true",
                      "consent.screen.text": "${profileScopeConsentText}"
                    },
                    "protocolMappers": [
                      {
                        "name": "zoneinfo",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "zoneinfo",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "zoneinfo",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "nickname",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "nickname",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "nickname",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "profile",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "profile",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "profile",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "full name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-full-name-mapper",
                        "consentRequired": false,
                        "config": {
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "userinfo.token.claim": "true"
                        }
                      },
                      {
                        "name": "birthdate",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "birthdate",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "birthdate",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "family name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "lastName",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "family_name",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "picture",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "picture",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "picture",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "website",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "website",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "website",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "locale",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "locale",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "locale",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "username",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "username",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "preferred_username",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "given name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-property-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "firstName",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "given_name",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "updated at",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "updatedAt",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "updated_at",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "middle name",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "middleName",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "middle_name",
                          "jsonType.label": "String"
                        }
                      },
                      {
                        "name": "gender",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": false,
                        "config": {
                          "userinfo.token.claim": "true",
                          "user.attribute": "gender",
                          "id.token.claim": "true",
                          "access.token.claim": "true",
                          "claim.name": "gender",
                          "jsonType.label": "String"
                        }
                      }
                    ]
                  },
                  {
                    "name": "web-origins",
                    "description": "OpenID Connect scope for add allowed web origins to the access token",
                    "protocol": "openid-connect",
                    "attributes": {
                      "include.in.token.scope": "false",
                      "display.on.consent.screen": "false",
                      "consent.screen.text": ""
                    },
                    "protocolMappers": [
                      {
                        "name": "allowed web origins",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-allowed-origins-mapper",
                        "consentRequired": false,
                        "config": {}
                      }
                    ]
                  }
                ],
                "defaultDefaultClientScopes": [
                  "roles",
                  "role_list",
                  "email",
                  "web-origins",
                  "profile"
                ],
                "defaultOptionalClientScopes": [
                  "microprofile-jwt",
                  "phone",
                  "address",
                  "offline_access"
                ]
              }
    
    
    
    
    
    
    
    
    
    
