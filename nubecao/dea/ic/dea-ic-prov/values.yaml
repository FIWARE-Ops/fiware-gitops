data-space-connector:
  apisix:
    image:
      debug: true
    dataPlane:
      ingress:
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        enabled: true
        hostname: broker.ic.dea.k8s.fiware.org
        extraHosts:
          - name: tmf.ic.dea.k8s.fiware.org
            path: /
          - name: tpp-broker.ic.dea.k8s.fiware.org
            path: /
          - name: tpp.ic.dea.k8s.fiware.org
            path: /
          - name: up-broker.ic.dea.k8s.fiware.org
            path: /
        tls: true
        extraTls:
          - secretName: tmf-tls
            hosts:
              - tmf.ic.dea.k8s.fiware.org
          - secretName: tpp-broker-tls
            hosts:
              - tpp-broker.ic.dea.k8s.fiware.org
          - secretName: tpp-tls
            hosts:
              - tpp.ic.dea.k8s.fiware.org
          - secretName: up-broker-tls
            hosts:
              - up-broker.ic.dea.k8s.fiware.org
    catchAllRoute:
      enabled: false
    routes: |-
      - uri: /.well-known/openid-configuration
        host: broker.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            verifier.dea-ic-prov.svc.cluster.local:3000: 1
          type: roundrobin
        plugins:
          proxy-rewrite:
            uri: /services/data-service/.well-known/openid-configuration
      - uri: /*
        host: broker.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            data-service-scorpio.dea-ic-prov.svc.cluster.local:9090: 1
          type: roundrobin
        plugins: 
          openid-connect:
            bearer_only: true
            use_jwks: true
            client_id: data-service
            client_secret: unused
            ssl_verify: false
            discovery: https://verifier.ic.dea.k8s.fiware.org/services/data-service/.well-known/openid-configuration
          opa:
            host: "http://localhost:8181"
            policy: policy/main
            with_body: true
      - uri: /*
        host: up-broker.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            data-service-scorpio.dea-ic-prov.svc.cluster.local:9090: 1
          type: roundrobin
        plugins: 
          request-validation:
            header_schema: 
              type: object
              required:
                - Demo
              properties:
                Demo:
                  type: string
                  pattern: Demo          
      - uri: /.well-known/openid-configuration
        host: tmf.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            verifier:3000: 1
          type: roundrobin
        plugins:
          proxy-rewrite:
            uri: /services/tmf-api/.well-known/openid-configuration
      - uri: /api/v1/catalogs
        host: tpp.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            rainbow.dea-ic-prov.svc.cluster.local:8080: 1
      - uri: /*
        host: tpp.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            rainbow.dea-ic-prov.svc.cluster.local:8080: 1
        plugins:
          openid-connect:
            bearer_only: true
            use_jwks: true
            client_id: data-service
            client_secret: unused
            ssl_verify: false
            discovery: https://verifier.ic.dea.k8s.fiware.org/services/data-service/.well-known/openid-configuration
          opa:
            host: "http://localhost:8181"
            policy: policy/main
            with_body: true
      - uri: /*
        host: tmf.ic.dea.k8s.fiware.org
        upstream:
          nodes:
            tm-forum-api.dea-ic-prov.svc.cluster.local:8080: 1
          type: roundrobin
        plugins:
          openid-connect:
            bearer_only: true
            use_jwks: true
            client_id: contract-management
            client_secret: unused
            ssl_verify: false
            discovery: https://verifier.ic.dea.k8s.fiware.org/services/tmf-api/.well-known/openid-configuration
          opa:
            host: "http://localhost:8181"
            policy: policy/main
            with_body: true

  credentials-config-service:
    database:
      host: authentication-mysql.dea-ic-prov.svc.cluster.local
    ingress:
      enabled: false
    registration:
      enabled: true
      services:
        - id: "did:web:ic.dea.k8s.fiware.org"
          defaultOidcScope: "openid learcredential"
          oidcScopes:
            "openid learcredential":
              credentials:
                - type: LegalPersonCredential
                  trustedParticipantsLists:
                    - https://tir.dea.k8s.fiware.org
                  trustedIssuersLists:
                    - http://trusted-issuers-list.dea-ic-prov.svc.cluster.local:8080
                  jwtInclusion:
                    enabled: true
                    fullInclusion: true
              presentationDefinition:
                id: pd
                input_descriptors:
                  - id: descriptor
                    constraints:
                      fields:
                        - id: vct
                          path:
                            - $.vct
                          filter:
                            const: "LegalPersonCredential"
                        - id: subject
                          path:
                            - $.firstName
                        - id: roles
                          path:
                            - $.roles
                    format:
                      "vc+sd-jwt":
                        alg:
                          - ES256
                format:
                  "vc+sd-jwt":
                    alg:
                      - ES256
        - id: data-service
          defaultOidcScope: "default"
          oidcScopes:
            "default":
              credentials:
                - type: UserCredential
                  trustedParticipantsLists:
                    - https://tir.dea.k8s.fiware.org
                  trustedIssuersLists:
                    - http://trusted-issuers-list.dea-ic-prov.svc.cluster.local:8080
                  jwtInclusion:
                    enabled: true
                    fullInclusion: true
            "operator":
              credentials:
                - type: OperatorCredential
                  trustedParticipantsLists:
                    - https://tir.dea.k8s.fiware.org
                  trustedIssuersLists:
                    - http://trusted-issuers-list.dea-ic-prov.svc.cluster.local:8080
                  jwtInclusion:
                    enabled: true
                    fullInclusion: true
        - id: tpp-service
          defaultOidcScope: "operator"
          oidcScopes:
            "operator":
              credentials:
                - type: OperatorCredential
                  trustedParticipantsLists:
                    - https://tir.dea.k8s.fiware.org
                  trustedIssuersLists:
                    - http://trusted-issuers-list.dea-ic-prov.svc.cluster.local:8080
                  jwtInclusion:
                    enabled: true
                    fullInclusion: true

  vcverifier:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      hosts:
        - host: verifier.ic.dea.k8s.fiware.org
          paths:
            - "/"
      tls:
        - secretName: verifier-tls
          hosts:
            - verifier.ic.dea.k8s.fiware.org
    deployment:
      image:
        repository: quay.io/wi_stefan/vcverifier
        tag: 10.0.1
        pullPolicy: Always
      logging:
        level: DEBUG
      verifier:
        tirAddress: https://tir.dea.k8s.fiware.org/
        did: did:web:verifier.ic.dea.k8s.fiware.org
        supportedModes: ["byValue","byReference"]
        clientIdentification:
          keyPath: /signing-key/client.key.pem
          requestKeyAlgorithm: ES256
          id: x509_san_dns:verifier.ic.dea.k8s.fiware.org
          certificatePath: /certificate/client-chain-bundle.cert.pem
      server:
        host: https://verifier.ic.dea.k8s.fiware.org
      configRepo:
        configEndpoint: http://credentials-config-service.dea-ic-prov.svc.cluster.local:8080
      additionalVolumes:
        - name: cert-chain
          secret:
            secretName: cert-chain
        - name: did-material
          emptyDir: {}
      additionalVolumeMounts:
        - name: cert-chain
          mountPath: /certificate

  mysql:
    resourcesPreset: none
    primary:
      persistence:
        enabled: true
    secondary:
      persistence:
        enabled: true

  postgis:
    enabled: false

  postgresql:
    enabled: false

managedPostgres:
  enabled: true
  config:
    volume:
      storageClass: longhorn

  didJson:
    enabled: true
    port: 8080
    ingress:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      enabled: true
      host: ic.dea.k8s.fiware.org
      tls:
        host: ic.dea.k8s.fiware.org
    key:
      x5u: https://ic.dea.k8s.fiware.org/.well-known/tls.crt

  dataSpaceConfig:
    enabled: true
    serviceType: ClusterIP
    port: 3002
    supportedModels:
      - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionPoint/schema.json"
      - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionCost/schema.json"
    supportedProtocols:
      - http
      - https
    authenticationProtocols:
      - oid4vp

  scorpio:
    db:
      dbhost: postgres.dea-ic-prov.svc.cluster.local
      user: scorpio
      existingSecret:
        enabled: true
        name: scorpio.postgres.credentials.postgresql.acid.zalan.do
        key: password
    ingress:
      enabled: false

  odrl-pap:
    database:
      # -- url to connect the db at
      url: jdbc:postgresql://postgres.dea-ic-prov.svc.cluster.local:5432/pap
      # -- username to access the db
      username: pap
      # -- secret to take the password from
      existingSecret:
        enabled: true
        name: pap.postgres.credentials.postgresql.acid.zalan.do
        key: password
    deployment:
      command:
        - /bin/sh
      args:
        - -ec
        - |
          #!/bin/sh
          export GENERAL_ORGANIZATION_DID=did:web:ic.dea.k8s.fiware.org
          ./application -Dquarkus.http.host=0.0.0.0
    ingress:
      enabled: false

  tm-forum-api:
    nameOverride: provider-tm-forum-api
    registration:
      enabled: false
    ingress:
      enabled: false

  # -- integration of rainbow
  rainbow:
    enabled: true
    db:
      url: postgres.dea-ic-prov.svc.cluster.local
      user: rainbow
      existingSecret: rainbow.postgres.credentials.postgresql.acid.zalan.do
      passwordKey: password
    ingress:
      enabled: false

  contract-management:
    til:
      credentialType: OperatorCredential
    services:
      ## Config for Trusted Issuers List
      trusted-issuers-list:
        ## URL of the Trusted Issuers List Service
        url: http://trusted-issuers-list.dea-ic-prov.svc.cluster.local:8080
      ## Config for the TM Forum Service hosting the APIs
      product-order:
        ## URL of the TM Forum Service hosting the Product Ordering API
        url: http://dea-ic-prov-provider-tm-forum-api-product-ordering-management.dea-ic-prov.svc.cluster.local:8080
      party:
        ## URL of the TM Forum Service hosting the Party API
        url: http://dea-ic-prov-provider-tm-forum-api-party-catalog.dea-ic-prov.svc.cluster.local:8080
      product-catalog:
        ## URL of the TM Forum Service hosting the Product Catalog API
        url: http://dea-ic-prov-provider-tm-forum-api-product-catalog.dea-ic-prov.svc.cluster.local:8080
      service-catalog:
        ## URL of the TM Forum Service hosting the Service Catalog API
        url: http://dea-ic-prov-provider-tm-forum-api-service-catalog.dea-ic-prov.svc.cluster.local:8080
      tmforum-agreement-api:
        ## URL of the TM Forum Service hosting the Agreement API
        url: http://dea-ic-prov-provider-tm-forum-api-agreement.dea-ic-prov.svc.cluster.local:8080
      quote:
        ## URL for TM Forum Service hosting the Quote API
        url: http://dea-ic-prov-provider-tm-forum-api-quote.dea-ic-prov.svc.cluster.local:8080
      rainbow:
        ## URL for the Rainbow service
        url: http://rainbow.dea-ic-prov.svc.cluster.local:8080

  trusted-issuers-list:
    deployment:
      image:
        tag: 0.2.2
    ingress:
      til:
        enabled: false

  mongodb:
    enabled: true
    resourcesPreset: none
    persistence:
      enabled: true
    architecture: standalone

  marketplace:
    enabled: true
    prep:
      name: bae-prep
      script:
        prep.sh: |-
          #!/bin/bash
  
          export BAE_LP_SIOP_CLIENT_ID=did:web:ic.dea.k8s.fiware.org
          # TODO TIM Replace with imported certificate from ingress
          wget http://did-helper:3002/did-material/private-key.pem
          export BAE_LP_SIOP_PRIVATE_KEY=$(openssl ec -in private-key.pem -noout -text | grep 'priv:' -A 3 | tail -n +2 | tr -d ':\n ') 
          echo ${BAE_LP_SIOP_PRIVATE_KEY}
          /entrypoint.sh

    siop:
      verifier:
        host: https://verifier.ic.dea.k8s.fiware.org
        callbackURL: https://verifier.ic.dea.k8s.fiware.org/auth/vc/callback
      allowedRoles:
        - seller
        - customer
        - admin
        - REPRESENTATIVE
        - READER
        - OPERATOR

    externalUrl: https://marketplace.ic.dea.k8s.fiware.org

    bizEcosystemChargingBackend:
      deployment:
        image:
          tag: 10.0.1
      extraEnvVars:
        - name: BAE_CB_MONGO_PASS
          valueFrom:
            secretKeyRef:
              name: marketplace-secret-env
              key: MONGO_BAE_CHARGING_PW
        - name: BAE_CB_CUSTOMER_BILL
          value: "http://dea-ic-prov-provider-tm-forum-api-customer-bill-management.dea-ic-prov.svc.cluster.local:8080/tmf-api/customerBillManagement/v4"

    bizEcosystemApis:
      tmForum:
        catalog:
          host: dea-ic-prov-provider-tm-forum-api-product-catalog.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/productCatalogManagement/v4
        ordering:
          host: dea-ic-prov-provider-tm-forum-api-product-ordering-management.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/productOrderingManagement/v4
        billing:
          host: dea-ic-prov-provider-tm-forum-api-account.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/accountManagement/v4
        usage:
          host: dea-ic-prov-provider-tm-forum-api-usage-management.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/usageManagement/v4
        party:
          host: dea-ic-prov-provider-tm-forum-api-party-catalog.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/party/v4
        customer:
          host: dea-ic-prov-provider-tm-forum-api-customer-management.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/customerManagement/v4
        resources:
          host: dea-ic-prov-provider-tm-forum-api-resource-catalog.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/resourceCatalog/v4
        services:
          host: dea-ic-prov-provider-tm-forum-api-service-catalog.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/serviceCatalogManagement/v4
        resourceInventory:
          host: dea-ic-prov-provider-tm-forum-api-resource-inventory.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/resourceInventoryManagement/v4
        inventory:
          host: dea-ic-prov-provider-tm-forum-api-product-inventory.dea-ic-prov.svc.cluster.local
          port: 8080
          path: /tmf-api/productInventory/v4

    bizEcosystemLogicProxy:
      command:
        - /prep/prep.sh
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/backend-protocol: HTTP
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        hosts:
          - host: marketplace.ic.dea.k8s.fiware.org
            paths:
              - "/"
        tls:
          - secretName: marketplace-tls
            hosts:
            - marketplace.ic.dea.k8s.fiware.org
      extraVolumeMounts:
        - name: bae-prep
          mountPath: /prep
      extraContainerVolumes:
        - name: bae-prep
          configMap:
            name: bae-prep
            defaultMode: 0777

      additionalEnvVars:
        - name: BAE_LP_SIOP_IS_REDIRECTION
          value: "true"
        - name: BAE_LP_PURCHASE_ENABLED
          value: "true"
        - name: BAE_LP_MONGO_PASS
          valueFrom:
            secretKeyRef:
              name: marketplace-secret-env
              key: MONGO_BAE_BELP_PW
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: "0"

  keycloak:
    externalDatabase:
      host: postgres.dea-ic-prov.svc.cluster.local
      database: keycloak
      user: keycloak
      existingSecret: keycloak.postgres.credentials.postgresql.acid.zalan.do
      existingSecretPasswordKey: password
    ingress:
      enabled: true
      hostname: keycloak.ic.dea.k8s.fiware.org
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    command:
      - /bin/bash
      - -c
    args:
      - |
        #!/bin/sh
        export DID=did:web:ic.dea.k8s.fiware.org
        export CLIENT_DID=did:web:ic.dea.k8s.fiware.org
        exec /opt/bitnami/scripts/keycloak/entrypoint.sh /opt/bitnami/scripts/keycloak/run.sh
    initContainers:
      - name: register-at-til
        image: quay.io/curl/curl:8.1.2
        command:
          - /bin/sh
        args:
          - -ec
          - |
            #!/bin/sh
            export DID=did:web:ic.dea.k8s.fiware.org
            export CLIENT_DID=did:web:ic.dea.k8s.fiware.org
            /bin/init.sh
        volumeMounts:
          - name: provider-til-registration
            mountPath: /bin/init.sh
            subPath: init.sh

      - name: prepare-envs
        image: docker.io/bitnami/keycloak:26.2.1-debian-12-r0
        command:
          - /bin/sh
        args:
          - -ec
          - |
            #!/bin/sh            
            export DID=did:web:ic.dea.k8s.fiware.org
            export CLIENT_DID=did:web:ic.dea.k8s.fiware.org
            cp -r /opt/bitnami/scripts/. /env-update/
            echo "export DID=$DID" >> /env-update/keycloak-env.sh
            cat /env-update/keycloak-env.sh
        volumeMounts:
          - name: kc-env
            mountPath: /env-update

    extraVolumeMounts:
      - name: realms
        mountPath: /opt/bitnami/keycloak/data/import
      - name: kc-env
        mountPath: /opt/bitnami/scripts/keycloak-env.sh
        subPath: keycloak-env.sh

    extraVolumes:
      - name: kc-env
        emptyDir: { }
      - name: realms
        configMap:
          name: test-realm-realm
      - name: provider-til-registration
        configMap:
          name: provider-til-registration
          defaultMode: 0755
    realm:
      frontendUrl: https://keycloak.ic.dea.k8s.fiware.org
      import: true
      name: test-realm
      attributes: |
        "vc.user-sd.credential_signing_alg_values_supported": "ES256",
        "vc.user-sd.credential_build_config.signing_algorithm": "ES256",
        "vc.user-sd.credential_build_config.token_jws_type": "vc+sd-jwt",
        "vc.user-sd.credential_build_config.proof_types_supported": "{\"jwt\":{\"proof_signing_alg_values_supported\":[\"ES256\"]}}",
        "vc.user-sd.format": "vc+sd-jwt",
        "vc.user-sd.scope": "LegalPersonCredential",
        "vc.user-sd.vct": "LegalPersonCredential",
        "vc.user-sd.credential_build_config.visible_claims": "roles,email",
        "vc.user-sd.credential_build_config.decoys": "3",
        "vc.user-credential.credential_signing_alg_values_supported": "ES256",
        "vc.user-credential.credential_build_config.signing_algorithm": "ES256",
        "vc.user-credential.credential_build_config.token_jws_type": "JWT",
        "vc.user-credential.credential_build_config.proof_types_supported": "{\"jwt\":{\"proof_signing_alg_values_supported\":[\"ES256\"]}}",
        "vc.user-credential.format": "jwt_vc",
        "vc.user-credential.scope": "LegalPersonCredential",
        "vc.user-credential.vct": "LegalPersonCredential",
        "vc.verifiable-credential.format": "vc+sd-jwt",
        "vc.verifiable-credential.scope": "VerifiableCredential",
        "vc.verifiable-credential.vct": "VerifiableCredential",
        "vc.operator-credential.format": "vc+sd-jwt",
        "vc.operator-credential.scope": "OperatorCredential",
        "vc.operator-credential.vct": "OperatorCredential"
      clientRoles: |
        "${DID}": [
          {
            "name": "customer",
            "description": "Is allowed to see offers etc.",
            "clientRole": true
          },
          {
            "name": "OPERATOR",
            "description": "Is allowed to operate clusters.",
            "clientRole": true
          },
          {
            "name": "REPRESENTATIVE",
            "description": "Is allowed to register.",
            "clientRole": true
          }],
        "account": [
          {
            "name": "delete-account",
            "description": "${role_delete-account}",
            "composite": false,
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "view-consent",
            "description": "${role_view-consent}",
            "composite": false,
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "view-groups",
            "description": "${role_view-groups}",
            "composite": false,
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "manage-account",
            "description": "${role_manage-account}",
            "composite": true,
            "composites": {
              "client": {
                "account": [
                  "manage-account-links"
                ]
              }
            },
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "view-profile",
            "description": "${role_view-profile}",
            "composite": false,
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "view-applications",
            "description": "${role_view-applications}",
            "composite": false,
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "manage-consent",
            "description": "${role_manage-consent}",
            "composite": true,
            "composites": {
              "client": {
                "account": [
                  "view-consent"
                ]
              }
            },
            "clientRole": true,
            "attributes": {}
          },
          {
            "name": "manage-account-links",
            "description": "${role_manage-account-links}",
            "composite": false,
            "clientRole": true,
            "attributes": {}
          }
        ]

      users: |
        {
          "username": "employee",
          "enabled": true,
          "email": "employee@provider.org",
          "firstName": "Test",
          "lastName": "User",
          "credentials": [
            {
              "type": "password",
              "value": "test"
            }
          ],
          "clientRoles": {
            "${DID}": [
              "seller",
              "admin"
            ],
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "groups": [
              "/consumer"
          ]
        }
      clientScopes: |
        {
          "name": "LegalPersonCredential",
          "description": "OIDC4VC Scope, that adds all properties required for a user.",
          "protocol": "openid-connect",
          "attributes": {},
          "protocolMappers": [
            {
              "name": "context-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-context-mapper",
              "config": {
                "context": "https://www.w3.org/2018/credentials/v1",
                "supportedCredentialTypes": "VerifiableCredential,LegalPersonCredential,OperatorCredential"
              }
            },
            {
              "name": "email-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "email",
                "userAttribute": "email",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential"
              }
            },
            {
              "name": "firstName-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "firstName",
                "userAttribute": "firstName",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential"
              }
            },
            {
              "name": "lastName-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-user-attribute-mapper",
              "config": {
                "subjectProperty": "lastName",
                "userAttribute": "lastName",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential"
              }
            },
            {
              "name": "role-mapper",
              "protocol": "oid4vc",
              "protocolMapper": "oid4vc-target-role-mapper",
              "config": {
                "subjectProperty": "roles",
                "clientId": "${DID}",
                "supportedCredentialTypes": "LegalPersonCredential,OperatorCredential"
              }
            }
          ]
        }
      clients: |
        {
          "clientId": "${DID}",
          "enabled": true,
          "description": "Client to connect test.org",
          "surrogateAuthRequired": false,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "defaultRoles": [],
          "redirectUris": [],   
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "client.secret.creation.time": "1675260539"
          },
          "protocolMappers": [
          ],
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [],
          "optionalClientScopes": []
        },
        {
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/test-realm/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/test-realm/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "realm_client": "false",
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "basic",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "organization",
            "microprofile-jwt"
          ]
        },
        {
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/test-realm/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/test-realm/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "realm_client": "false",
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "706c5202-1b03-4fad-a5b8-484287e941f8",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "basic",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "organization",
            "microprofile-jwt",
            "LegalPersonCredential"
          ]
        },
        {
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "realm_client": "false",
            "client.use.lightweight.access.token.enabled": "true"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "basic",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "organization",
            "microprofile-jwt",
            "UserCredential"
          ]
        }

  registration:
    enabled: true
    configMap: provider-til-registration
    til: http://trusted-issuers-list.dea-ic-prov.svc.cluster.local:8080
    did: did:web:ic.dea.k8s.fiware.org
    credentialTypes:
      - LegalPersonCredential
    prepScript: export DID=did:web:ic.dea.k8s.fiware.org
